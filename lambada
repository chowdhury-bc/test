ws.onmessage = (event) => {
  console.log("Raw message:", typeof event.data, event.data.substring(0, 50));
  
  try {
    // Safely decode base64
    let decodedText;
    try {
      decodedText = atob(event.data);
      console.log("Decoded:", decodedText.substring(0, 50));
    } catch (b64Error) {
      console.error("Base64 decode failed:", b64Error);
      props.onSendMessage?.(event.data, ChatMessageType.AI);
      return;
    }
    
    // Safely parse JSON
    let parsedData;
    try {
      parsedData = JSON.parse(decodedText);
    } catch (jsonError) {
      console.error("JSON parse failed:", jsonError);
      // Just show the raw text if we can't parse it
      props.onSendMessage?.(decodedText, ChatMessageType.AI);
      return;
    }
    
    // Process the message based on content
    if (parsedData.text) {
      if (parsedData.text === "ack-end-of-msg") {
        setTimeout(() => setDisabled(false), 1000);
        return;
      }
      
      // Accumulate text
      msgs = msgs ? msgs + parsedData.text : parsedData.text;
      props.onSendMessage?.(msgs, ChatMessageType.AI);
    } 
    else if (parsedData.intermediate_execution || parsedData.prompt_flow) {
      console.log("System message:", parsedData);
      if (parsedData.done) setDisabled(false);
    }
    else {
      console.log("Unknown format:", parsedData);
      props.onSendMessage?.(JSON.stringify(parsedData), ChatMessageType.AI);
    }
  } catch (error) {
    console.error("General error:", error);
    setDisabled(false);
  }
};
