// Replace line 276 in chat-ui-input-panel.tsx with this:
ws.onmessage = (event) => {
  try {
    // First check if the data can be parsed directly
    const rawData = event.data;
    let parsedData;
    
    if (rawData.includes('message')) {
      parsedData = JSON.parse(rawData);
      if (parsedData['message'] && parsedData['message'].includes('Endpoint')) {
        parsedData['message'] = 'Hang in there';
      }
      props.onSendMessage?.(parsedData['message'], ChatMessageType.AI);
    } else {
      // Try to decode as base64 and then parse
      try {
        parsedData = JSON.parse(atob(rawData));
        if ('text' in parsedData) {
          msgs = msgs ? msgs + parsedData['text'] : parsedData['text'];
          
          if (msgs.endsWith('ack-end-of-msg')) {
            msgs = msgs.replace('ack-end-of-msg', '');
            setTimeout(() => {
              setDisabled(false);
            }, 3000);
          }
          props.onSendMessage?.(msgs, ChatMessageType.AI);
        } else {
          // Display errors
          props.onSendMessage?.(JSON.stringify(parsedData), ChatMessageType.AI);
          setDisabled(false);
        }
      } catch (base64Error) {
        console.error("Failed to parse base64 data:", base64Error);
        props.onSendMessage?.("Error parsing response from server", ChatMessageType.AI);
        setDisabled(false);
      }
    }
  } catch (error) {
    console.error("WebSocket message error:", error);
    props.onSendMessage?.("Error processing server response", ChatMessageType.AI);
    setDisabled(false);
  }
};







========
lambda 

ws.onmessage = (event) => {
  try {
    const rawData = event.data;
    
    // First try direct JSON parsing
    if (rawData.includes('message')) {
      const parsedData = JSON.parse(rawData);
      if (parsedData['message'] && parsedData['message'].includes('Endpoint')) {
        parsedData['message'] = 'Hang in there';
      }
      props.onSendMessage?.(parsedData['message'], ChatMessageType.AI);
    } else {
      // Try base64 decoding
      try {
        const decodedData = atob(rawData);
        const parsedData = JSON.parse(decodedData);
        
        if ('text' in parsedData) {
          if (msgs) {
            msgs += parsedData['text'];
          } else {
            msgs = parsedData['text'];
          }

          if (msgs.endsWith('ack-end-of-msg')) {
            msgs = msgs.replace('ack-end-of-msg', '');
            setTimeout(() => {
              setDisabled(false);
            }, 3000);
          }
          props.onSendMessage?.(msgs, ChatMessageType.AI);
        }
        pass

    return {'statusCode': 200, 'body': 'Bedrock says hello'}
