import json
import datetime

def lambda_handler(event, context):
    print(event)
    agent = event['agent']
    actionGroup = event['actionGroup']
    function = event['function']
    parameters = event.get('parameters', [])
    
    def get_time():
        return datetime.datetime.utcnow().strftime('%H:%M:%S')
    
    def mul(no1, no2):
        return no1 * no2
    
    # Create params dictionary with proper error handling
    params = {}
    for param in parameters:
        if param['type'] == 'number':
            try:
                params[param['name'].lower()] = int(param['value'])
            except ValueError:
                pass  # Handle non-integer values
    
    if function == "mul":
        no1 = params.get('no1')
        no2 = params.get('no2')
        if no1 is not None and no2 is not None:
            try:
                result = mul(no1, no2)
                result_text = "The result of multiplying {} and {} is {}".format(no1, no2, result)
            except Exception as e:
                result_text = f"Error: {str(e)}"
        else:
            result_text = "Error: Missing one or more required parameters"
        
        responseBody = {
            "TEXT": {
                "body": result_text
            }
        }
    elif function == "gettime":
        result = get_time()
        result_text = "The time is {}".format(result)
        responseBody = {
            "TEXT": {
                "body": result_text
            }
        }
    else:
        responseBody = {
            "TEXT": {
                "body": "This function is not supported"
            }
        }
    
    action_response = {
        'actionGroup': actionGroup,
        'function': function,
        'functionResponse': {
            'responseBody': responseBody
        }
    }
    
    return action_response  # You were missing this return statement
