import datetime

def lambda_handler(event, context):
    # ---- 1.  Pull the inputs ----
    action_group = event["actionGroup"]
    function     = event["function"]
    params_obj   = event.get("parameters", {})

    # allow either {"no1": "3", ...}  or  [{"name":"no1",...}]
    if isinstance(params_obj, list):
        params = {p["name"].lower(): p.get("value") for p in params_obj}
    else:
        params = {k.lower(): v for k, v in params_obj.items()}

    # ---- 2.  Helper functions ----
    def get_time():
        return datetime.datetime.utcnow().strftime("%H:%M:%S")

    def mul(a, b):
        return a * b

    # ---- 3.  Business logic ----
    if function == "mul":
        try:
            a, b = int(params["no1"]), int(params["no2"])
            result_text = f"The result of multiplying {a} and {b} is {mul(a, b)}"
        except (KeyError, ValueError):
            result_text = "Error: both parameters no1 and no2 must be valid numbers"
    elif function == "gettime":
        result_text = f"The time is {get_time()}"
    else:
        result_text = "Error: unsupported function"

    # ---- 4.  Build Bedrock-compliant response ----
    return {
        "messageVersion": "1.0",
        "response": {
            "actionGroup": action_group,
            "function":     function,
            "functionResponse": {
                "responseBody": {
                    "TEXT": {
                        "body": result_text
                    }
                }
            }
        }
    }
