ws.onmessage = (event) => {
  try {
    // For debugging
    console.log("Raw message received:", event.data.substring(0, 50));
    
    // Handle regular JSON messages
    if (typeof event.data === 'string' && event.data.includes('message')) {
      var evt_json = JSON.parse(event.data);
      props.onSendMessage?.(evt_json['message'], ChatMessageType.AI);
      return;
    }
    
    // Handle base64 encoded data
    try {
      // Try to decode base64
      const decodedData = atob(event.data);
      console.log("Decoded data:", decodedData.substring(0, 100));
      
      try {
        // Try to parse as JSON
        const chat_output = JSON.parse(decodedData);
        
        if ('text' in chat_output) {
          if (msgs) {
            msgs += chat_output['text'];
          } else {
            msgs = chat_output['text'];
          }
          
          if (msgs.endsWith('ack-end-of-msg')) {
            msgs = msgs.replace('ack-end-of-msg', '');
            props.onSendMessage?.(msgs, ChatMessageType.AI);
            msgs = null;
            setTimeout(() => setDisabled(false), 3000);
          } else {
            props.onSendMessage?.(msgs, ChatMessageType.AI);
          }
        } else {
          // Handle other message types
          console.log("Non-text output:", chat_output);
          props.onSendMessage?.(JSON.stringify(chat_output), ChatMessageType.AI);
          setDisabled(false);
        }
      } catch (jsonError) {
        // If JSON parsing fails, just use the raw decoded text
        console.log("Not valid JSON, using raw decoded text");
        props.onSendMessage?.(decodedData, ChatMessageType.AI);
        setDisabled(false);
      }
    } catch (b64Error) {
      // If base64 decoding fails, use the raw message
      console.log("Not valid base64, using raw message");
      props.onSendMessage?.(event.data, ChatMessageType.AI);
      setDisabled(false);
    }
  } catch (error) {
    console.error("WebSocket processing error:", error);
    props.onSendMessage?.("Error processing message", ChatMessageType.AI);
    setDisabled(false);
  }
};
