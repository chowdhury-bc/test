ws.onmessage = (event) => {
  try {
    // Debugging
    console.log("Raw message received:", typeof event.data, event.data.substring ? event.data.substring(0, 50) : "Non-string data");
    
    // Check if the data is a string and includes 'message'
    if (typeof event.data === 'string' && event.data.includes('message')) {
      var evt_json = JSON.parse(event.data);
      props.onSendMessage?.(evt_json['message'], ChatMessageType.AI);
    }
    // Base64 handling
    else if (typeof event.data === 'string' && /^[A-Za-z0-9+/=]+$/.test(event.data.trim())) {
      try {
        const decodedData = atob(event.data);
        console.log("Decoded data:", decodedData.substring(0, 50));
        
        const chat_output = JSON.parse(decodedData);
        
        if ('text' in chat_output) {
          const textChunk = chat_output['text'];
          console.log("Text chunk:", textChunk);
          
          // Display each chunk directly to ensure streaming works
          props.onSendMessage?.(textChunk, ChatMessageType.AI);
          
          // If this is the end marker, reset state
          if (textChunk.includes('ack-end-of-msg')) {
            setDisabled(false);
          }
        } else {
          console.log("Non-text output:", chat_output);
          props.onSendMessage?.(JSON.stringify(chat_output), ChatMessageType.AI);
          setDisabled(false);
        }
      } catch (e) {
        console.error("Base64 parsing error:", e);
        props.onSendMessage?.("Error parsing response", ChatMessageType.AI);
        setDisabled(false);
      }
    }
    // Plain text handling
    else if (typeof event.data === 'string') {
      console.log("Plain text message:", event.data.substring(0, 50));
      props.onSendMessage?.(event.data, ChatMessageType.AI);
      setDisabled(false);
    }
    else {
      console.error("Unknown data type:", typeof event.data);
      props.onSendMessage?.("Unsupported response format", ChatMessageType.AI);
      setDisabled(false);
    }
  } catch (error) {
    console.error("WebSocket processing error:", error);
    props.onSendMessage?.("Error processing message", ChatMessageType.AI);
    setDisabled(false);
  }
};
